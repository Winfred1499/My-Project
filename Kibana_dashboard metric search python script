#!/usr/bin/env python3
import time
import pyautogui
from PIL import ImageGrab
from selenium import webdriver
from selenium.webdriver.common.by import By
import getpass
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException, TimeoutException
from datetime import datetime

vitals_build = ['software_version=', """_osFileTag":'""", 'software_version"#"', "clientTimestamp"]
key = ["key=", """key":'""", 'key":', '"key"#"', 'key#', """Data=[['"""]
metadata = ["metadata=", 'metadata"#"', """metadata":'""", "metadata#"]
metadata1 = ["metadata1=", 'metadata1"#"', """metadata1":'""", "metadata1#"]
metadata2 = ["metadata2=", 'metadata2"#"', """metadata2":'""", "metadata2#"]
metadata3 = ["metadata3=", 'metadata3"#"', """metadata3":'""", "metadata3#"]
metadata4 = ["metadata4=", 'metadata4"#"', """metadata4":'""", "metadata4#"]

def user_detail():
    global user_name, crown_password, zukey, password, Windows_Linux, raw_agg, Path
    user_name = input("Enter user name: ")
    crown_password = getpass.getpass("Enter crowd password: ")
    zukey = input("Press Zukey: ")
    password = crown_password + zukey
    print()
    Windows_Linux = input("For Windows = Enter 1\nFor Linux = Enter 2\nWindows or Linux: ")
    windows_path = f"c:/Users/{user_name}/Pictures/"
    linux_path = f"/home/ANT.AMAZON.COM/{user_name}/Pictures/"
    if Windows_Linux == "1":
        Path = windows_path
    else:
        Path = linux_path
    print()
    raw_agg = input("For Raw = Enter 1\nFor Agg = Enter 2\nRaw or Agg: ")
    print()

def metric_input():
    global device_name, device_type, ota_pool, version_value, vlog_metric, vital_metric, vlog_vitals, fos_ace, device_record_time_value, screenshot
    device_name = input("Enter device name: ")
    ota_pool = input("Enter ota group: ")
    device_type = input("Enter device type: ")
    screenshot = input("Screen shot name: ")
    print()
    fos_ace = input("""For FOS device = Enter 1\nFor ACE device = Enter 2\nFOS or ACE device: """)
    print()
    while True:
        while True:
            vlog_metric = input("Enter vlog metric: ")
            print()
            if not any(vitals in vlog_metric for vitals in vitals_build):
                break
            print("Error: Metric mismatches")
            print()
        while True:
            vital_metric = input("Note: Input vital metric contains build info\nEnter vitals metric: ")
            print()
            if any(vitals in vital_metric for vitals in vitals_build):
                break
            print("Error: Metric mismatches")
            print()
        break

def metric_time_raw():
    global device_record_time_value_vlog, device_record_time_value_vital
    if fos_ace == "1" and vlog_metric:
        parts = vlog_metric.split()
        date = parts[0]
        time_sec = parts[1]
        time_split = time_sec.split(".")
        time_str = time_split[0]
        current_year = datetime.now().year
        device_record_time_value_vlog = f'["{current_year}-{date}T{time_str}" TO "{current_year}-{date}T{time_str}"]'
    if fos_ace == "1" and vital_metric:
        parts = vital_metric.split()
        date = parts[0]
        time_sec = parts[1]
        time_split = time_sec.split(".")
        time_str = time_split[0]
        current_year = datetime.now().year
        device_record_time_value_vital = f'["{current_year}-{date}T{time_str}" TO "{current_year}-{date}T{time_str}"]'
    if fos_ace == "2" and vlog_metric:
        parts = vlog_metric.split(":")
        device_record_time_value_vlog = parts[0]
    if fos_ace == "2" and vital_metric:
        device_record_time_start = vital_metric.find('Timestamp":"') + len('Timestamp":"')
        device_record_time_end = vital_metric.find('.000+00:00"', device_record_time_start)
        device_record_time = vital_metric[device_record_time_start:device_record_time_end]
        device_record_time_value_vital = f'["{device_record_time}" TO "{device_record_time}"]'
    else:
        print()

def metric_time_agg():
    global device_record_time_value_vlog, device_record_time_value_vital
    if fos_ace == "1" and vlog_metric:
        parts = vlog_metric.split()
        date = parts[0]
        current_year = datetime.now().year
        device_record_time_value_vlog = f'["{current_year}-{date}" TO "{current_year}-{date}"]'
    if fos_ace == "1" and vital_metric:
        parts = vital_metric.split()
        date = parts[0]
        current_year = datetime.now().year
        device_record_time_value_vital = f'["{current_year}-{date}" TO "{current_year}-{date}"]'
    if fos_ace == "2" and vital_metric:
        device_record_time_start = vital_metric.find('Timestamp":"') + len('Timestamp":"')
        device_record_time_end = vital_metric.find('T', device_record_time_start)
        device_record_time = vital_metric[device_record_time_start:device_record_time_end]
        device_record_time_value_vlog = f'["{device_record_time}" TO "{device_record_time}"]'
        device_record_time_value_vital = device_record_time_value_vlog
    else:
        print()

def filter_values_vlog():
    global operation_value_vlog, key_value_vlog, metadata_value_vlog, metadata1_value_vlog, metadata2_value_vlog, metadata3_value_vlog, metadata4_value_vlog
    if 'wifiKDM:' in vlog_metric:
        operation_start = vlog_metric.find('wifiKDM:') + len('wifiKDM:')
        operation_end = vlog_metric.find(':', operation_start)
        operation_value_vlog = vlog_metric[operation_start:operation_end]
    if """operation":'""" in vlog_metric:
        operation_start = vlog_metric.find("""operation":'""") + len("""operation":'""")
        operation_end = vlog_metric.find("'", operation_start)
        operation_value_vlog = vlog_metric[operation_start:operation_end]
    if "key=" in vlog_metric:
        key_start = vlog_metric.find("key=") + len("key=")
        key_end = vlog_metric.find(";", key_start)
        key_value_vlog = vlog_metric[key_start:key_end]
    if 'key#' in vlog_metric:
        key_start = vlog_metric.find('key#') + len('key#')
        key_end = vlog_metric.find('$', key_start)
        key_value_vlog = vlog_metric[key_start:key_end]
    if "metadata=" in vlog_metric:
        metadata_start = vlog_metric.find("metadata=") + len("metadata=")
        metadata_end = vlog_metric.find(";", metadata_start)
        metadata_value_vlog = vlog_metric[metadata_start:metadata_end]
        if len(metadata_value_vlog) > 10:
            metadata_start = vlog_metric.find("metadata=") + len("metadata=")
            metadata_end = vlog_metric.find("!", metadata_start)
            metadata_value_vlog = vlog_metric[metadata_start:metadata_end]
    if 'metadata"#"' in vlog_metric:
        metadata_start = vlog_metric.find('metadata"#"') + len('metadata"#"')
        metadata_end = vlog_metric.find('"', metadata_start)
        metadata_value_vlog = vlog_metric[metadata_start:metadata_end]
    if "metadata#" in vlog_metric:
        metadata_start = vlog_metric.find("metadata#") + len("metadata#")
        metadata_end = vlog_metric.find("$", metadata_start)
        metadata_value_vlog = vlog_metric[metadata_start:metadata_end]
    if "metadata1=" in vlog_metric:
        metadata1_start = vlog_metric.find("metadata1=") + len("metadata1=")
        metadata1_end = vlog_metric.find(";", metadata1_start)
        metadata1_value_vlog = vlog_metric[metadata1_start:metadata1_end]
    if 'metadata1"#"' in vlog_metric:
        metadata1_start = vlog_metric.find('metadata1"#"') + len('metadata1"#"')
        metadata1_end = vlog_metric.find('"', metadata1_start)
        metadata1_value_vlog = vlog_metric[metadata1_start:metadata1_end]
    if 'metadata1#' in vlog_metric:
        metadata1_start = vlog_metric.find('metadata1#') + len('metadata1#')
        metadata1_end = vlog_metric.find('$', metadata1_start)
        metadata1_value_vlog = vlog_metric[metadata1_start:metadata1_end]
    if "metadata2=" in vlog_metric:
        metadata2_start = vlog_metric.find("metadata2=") + len("metadata2=")
        metadata2_end = vlog_metric.find(";", metadata2_start)
        metadata2_value_vlog = vlog_metric[metadata2_start:metadata2_end]
    if 'metadata2"#"' in vlog_metric:
        metadata2_start = vlog_metric.find('metadata2"#"') + len('metadata2"#"')
        metadata2_end = vlog_metric.find('"', metadata2_start)
        metadata2_value_vlog = vlog_metric[metadata2_start:metadata2_end]
    if 'metadata2#' in vlog_metric:
        metadata2_start = vlog_metric.find('metadata2#') + len('metadata2#')
        metadata2_end = vlog_metric.find('$', metadata2_start)
        metadata2_value_vlog = vlog_metric[metadata2_start:metadata2_end]
    if "metadata3=" in vlog_metric:
        metadata3_start = vlog_metric.find("metadata3=") + len("metadata3=")
        metadata3_end = vlog_metric.find(";", metadata3_start)
        metadata3_value_vlog = vlog_metric[metadata3_start:metadata3_end]
    if 'metadata3"#"' in vlog_metric:
        metadata3_start = vlog_metric.find('metadata3"#"') + len('metadata3"#"')
        metadata3_end = vlog_metric.find('"', metadata3_start)
        metadata3_value_vlog = vlog_metric[metadata3_start:metadata3_end]
    if 'metadata3#' in vlog_metric:
        metadata3_start = vlog_metric.find('metadata3#') + len('metadata3#')
        metadata3_end = vlog_metric.find('$', metadata3_start)
        metadata3_value_vlog = vlog_metric[metadata3_start:metadata3_end]
    if "metadata4=" in vlog_metric:
        metadata4_start = vlog_metric.find("metadata4=") + len("metadata4=")
        metadata4_end = vlog_metric.find(";", metadata4_start)
        metadata4_value_vlog = vlog_metric[metadata4_start:metadata4_end]
    if 'metadata4"#"' in vlog_metric:
        metadata4_start = vlog_metric.find('metadata4"#"') + len('metadata4"#"')
        metadata4_end = vlog_metric.find('"', metadata4_start)
        metadata4_value_vlog = vlog_metric[metadata4_start:metadata4_end]
    if 'metadata4#' in vlog_metric:
        metadata4_start = vlog_metric.find('metadata4#') + len('metadata4#')
        metadata4_end = vlog_metric.find('$', metadata4_start)
        metadata4_value_vlog = vlog_metric[metadata4_start:metadata4_end]
    else:
        print()

def filter_values_vital():
    global version_value, operation_value_vital, key_value_vital, metadata_value_vital, metadata1_value_vital, metadata2_value_vital, metadata3_value_vital, metadata4_value_vital
    if 'software_version=' in vital_metric:
        version_start = vital_metric.find('software_version=') + len('software_version=')
        version_end = vital_metric.find(';', version_start)
        version_value = vital_metric[version_start:version_end]
    if """_osFileTag":'""" in vital_metric:
        version_start = vital_metric.find("""_osFileTag":'""") + len("""_osFileTag":'""")
        version_end = vital_metric.find("'", version_start)
        version_value = vital_metric[version_start:version_end]
    if 'software_version"#"' in vital_metric:
        version_start = vital_metric.find('software_version"#"') + len('software_version"#"')
        version_end = vital_metric.find('"', version_start)
        version_value = vital_metric[version_start:version_end]
    if 'wifiKDM:' in vital_metric:
        operation_start = vital_metric.find('wifiKDM:') + len('wifiKDM:')
        operation_end = vital_metric.find(':', operation_start)
        operation_value_vital = vital_metric[operation_start:operation_end]
    if 'operation=' in vital_metric:
        operation_start = vital_metric.find('operation=') + len('operation=')
        operation_end = vital_metric.find(';', operation_start)
        operation_value_vital = vital_metric[operation_start:operation_end]
    if """operation":'""" in vital_metric:
        operation_start = vital_metric.find("""operation":'""") + len("""operation":'""")
        operation_end = vital_metric.find("'", operation_start)
        operation_value_vital = vital_metric[operation_start:operation_end]
    if "key=" in vital_metric:
        key_start = vital_metric.find("key=") + len("key=")
        key_end = vital_metric.find(";", key_start)
        key_value_vital = vital_metric[key_start:key_end]
    if """key":'""" in vital_metric:
        key_start = vital_metric.find("""key":'""") + len("""key":'""")
        key_end = vital_metric.find("'", key_start)
        key_value_vital = vital_metric[key_start:key_end]
    if '"key"#"' in vital_metric:
        key_start = vital_metric.find('"key"#"') + len('"key"#"')
        key_end = vital_metric.find('"', key_start)
        key_value_vital = vital_metric[key_start:key_end]
    if """Data=[['""" in vital_metric:
        key_start = vital_metric.find("""Data=[['""") + len("""Data=[['""")
        key_end = vital_metric.find("'", key_start)
        key_value_vital = vital_metric[key_start:key_end]
    if "metadata=" in vital_metric:
        metadata_start = vital_metric.find("metadata=") + len("metadata=")
        metadata_end = vital_metric.find(";", metadata_start)
        metadata_value_vital = vital_metric[metadata_start:metadata_end]
        if len(metadata_value_vital) > 10:
            metadata_start = vital_metric.find("metadata=") + len("metadata=")
            metadata_end = vital_metric.find("!", metadata_start)
            metadata_value_vital = vital_metric[metadata_start:metadata_end]
    if 'metadata"#"' in vital_metric:
        metadata_start = vital_metric.find('metadata"#"') + len('metadata"#"')
        metadata_end = vital_metric.find('"', metadata_start)
        metadata_value_vital = vital_metric[metadata_start:metadata_end]
    if """metadata":'""" in vital_metric:
        metadata_start = vital_metric.find("""metadata":'""") + len("""metadata":'""")
        metadata_end = vital_metric.find("'", metadata_start)
        metadata_value_vital = vital_metric[metadata_start:metadata_end]
    if "metadata1=" in vital_metric:
        metadata1_start = vital_metric.find("metadata1=") + len("metadata1=")
        metadata1_end = vital_metric.find(";", metadata1_start)
        metadata1_value_vital = vital_metric[metadata1_start:metadata1_end]
    if 'metadata1"#"' in vital_metric:
        metadata1_start = vital_metric.find('metadata1"#"') + len('metadata1"#"')
        metadata1_end = vital_metric.find('"', metadata1_start)
        metadata1_value_vital = vital_metric[metadata1_start:metadata1_end]
    if """metadata1":'""" in vital_metric:
        metadata1_start = vital_metric.find("""metadata1":'""") + len("""metadata1":'""")
        metadata1_end = vital_metric.find("'", metadata1_start)
        metadata1_value_vital = vital_metric[metadata1_start:metadata1_end]
    if "metadata2=" in vital_metric:
        metadata2_start = vital_metric.find("metadata2=") + len("metadata2=")
        metadata2_end = vital_metric.find(";", metadata2_start)
        metadata2_value_vital = vital_metric[metadata2_start:metadata2_end]
    if 'metadata2"#"' in vital_metric:
        metadata2_start = vital_metric.find('metadata2"#"') + len('metadata2"#"')
        metadata2_end = vital_metric.find('"', metadata2_start)
        metadata2_value_vital = vital_metric[metadata2_start:metadata2_end]
    if """metadata2":'""" in vital_metric:
        metadata2_start = vital_metric.find("""metadata2":'""") + len("""metadata2":'""")
        metadata2_end = vital_metric.find("'", metadata2_start)
        metadata2_value_vital = vital_metric[metadata2_start:metadata2_end]
    if "metadata3=" in vital_metric:
        metadata3_start = vital_metric.find("metadata3=") + len("metadata3=")
        metadata3_end = vital_metric.find(";", metadata3_start)
        metadata3_value_vital = vital_metric[metadata3_start:metadata3_end]
    if 'metadata3"#"' in vital_metric:
        metadata3_start = vital_metric.find('metadata3"#"') + len('metadata3"#"')
        metadata3_end = vital_metric.find('"', metadata3_start)
        metadata3_value_vital = vital_metric[metadata3_start:metadata3_end]
    if """metadata3":'""" in vital_metric:
        metadata3_start = vital_metric.find("""metadata3":'""") + len("""metadata3":'""")
        metadata3_end = vital_metric.find("'", metadata3_start)
        metadata3_value_vital = vital_metric[metadata3_start:metadata3_end]
    if "metadata4=" in vital_metric:
        metadata4_start = vital_metric.find("metadata4=") + len("metadata4=")
        metadata4_end = vital_metric.find(";", metadata4_start)
        metadata4_value_vital = vital_metric[metadata4_start:metadata4_end]
    if 'metadata4"#"' in vital_metric:
        metadata4_start = vital_metric.find('metadata4"#"') + len('metadata4"#"')
        metadata4_end = vital_metric.find('"', metadata4_start)
        metadata4_value_vital = vital_metric[metadata4_start:metadata4_end]
    if """metadata4":'""" in vital_metric:
        metadata4_start = vital_metric.find("""metadata4":'""") + len("""metadata4":'""")
        metadata4_end = vital_metric.find("'", metadata4_start)
        metadata4_value_vital = vital_metric[metadata4_start:metadata4_end]
    else:
        print()

def search_filter():
    global Filter_kdm, Filter_minerva
    Filter_kdm = f"software_version:{version_value} AND device_family:{device_name} AND operation:{operation_value_vlog} AND pool:{ota_pool} AND device_type:{device_type} AND device_record_time:{device_record_time_value_vlog}"
    Filter_minerva = f"software_version:{version_value} AND device_family:{device_name} AND operation:{operation_value_vital} AND pool:{ota_pool} AND device_type:{device_type} AND device_record_time:{device_record_time_value_vital}"
    if any(value in vlog_metric for value in key):
        Filter_kdm += f" AND key:{key_value_vlog}"
    if any(value in vlog_metric for value in metadata):
        Filter_kdm += f" AND metadata:{metadata_value_vlog}"
    if any(value in vlog_metric for value in metadata1):
        Filter_kdm += f" AND d_metadata1:{metadata1_value_vlog}"
    if any(value in vlog_metric for value in metadata2):
        Filter_kdm += f" AND d_metadata2:{metadata2_value_vlog}"
    if any(value in vlog_metric for value in metadata3):
        Filter_kdm += f" AND d_metadata3:{metadata3_value_vlog}"
    if any(value in vlog_metric for value in metadata4):
        Filter_kdm += f" AND d_metadata4:{metadata4_value_vlog}"
    if any(value in vital_metric for value in key):
        Filter_minerva += f" AND key:{key_value_vital}"
    if any(value in vital_metric for value in metadata):
        Filter_minerva += f" AND metadata:{metadata_value_vital}"
    if any(value in vital_metric for value in metadata1):
        Filter_minerva += f" AND d_metadata1:{metadata1_value_vital}"
    if any(value in vital_metric for value in metadata2):
        Filter_minerva += f" AND d_metadata2:{metadata2_value_vital}"
    if any(value in vital_metric for value in metadata3):
        Filter_minerva += f" AND d_metadata3:{metadata3_value_vital}"
    if any(value in vital_metric for value in metadata4):
        Filter_minerva += f" AND d_metadata4:{metadata4_value_vital}"
    if raw_agg == "2":
        Filter_kdm += " AND program:wifiKDM"
        Filter_minerva += " AND program:wifiKDM_minerva"
    else:
        print()

def raw():
    print("Prerequisites: Metric should be emitted from device side and kept connected to stable internet for more then 4 hours")
    print()
    time.sleep(3)
    driver = webdriver.Firefox()
    driver.maximize_window()
    driver.get("https://kdm-raw-es.labcollab.net/app/kibana#/discover?_g=h@44136fa&_a=h@b49d08f")
    userid = WebDriverWait(driver,100).until(
        EC.element_to_be_clickable((By.XPATH,"//div/div/form/input[@id='user_name_field']"))
    )
    userid.send_keys(user_name)
    driver.find_element(By.XPATH,"//div/div/form/input[@id='user_name_btn']").click()
    WebDriverWait(driver,100).until(
        EC.element_to_be_clickable((By.XPATH,"//div/div/form/input[@id='password_field']"))
    ).send_keys(password)
    driver.find_element(By.XPATH,"//div/div/form/input[@id='password_btn']").click()
    search = WebDriverWait(driver,100).until(
        EC.element_to_be_clickable((By.XPATH,"//div/div/form/div/div/input[@placeholder='Search...']"))
    )
    time.sleep(2)
    pyautogui.hotkey("backspace")
    time.sleep(2)
    search.send_keys(Filter_kdm)
    time.sleep(3)
    WebDriverWait(driver,20).until(
        EC.element_to_be_clickable((By.XPATH,"//div/div/div/pretty-duration[@from='timefilter.time.from']"))
    ).click()
    WebDriverWait(driver,20).until(
        EC.element_to_be_clickable((By.XPATH,"//div/div/div/div/ul/li/a[contains(text(),'Last 7 days')]"))
    ).click()
    time.sleep(3)
    pyautogui.hotkey("Ctrl", "R")
    time.sleep(2)
    try:
        kdm_results = WebDriverWait(driver,30).until(
              EC.element_to_be_clickable((By.XPATH, "//div/doc-table/div[@class='doc-table-container']"))
        )
        time.sleep(3)
        kdm_results_text = kdm_results.text
        if version_value in kdm_results_text:
            WebDriverWait(driver,20).until(
              EC.element_to_be_clickable((By.XPATH,"//div/table/tbody/tr/td[@ng-click='toggleRow()']"))
            ).click()
            full_capture = driver.find_element(By.XPATH,"//div/table/tbody/tr/td/doc-viewer/div[@class='doc-viewer']")
            kdm_file_path = f"{Path}{screenshot}_kdm.png"
            full_capture.screenshot(kdm_file_path)
            print(f"Screenshot saved to {kdm_file_path}")
        else:
            print()
            kdm_file_path = f"{Path}{screenshot}_kdm.png"
            screen_capture = ImageGrab.grab()
            screen_capture.save(kdm_file_path)
            print(f"Screenshot saved to {kdm_file_path}")
    except NoSuchElementException and TimeoutException:
        print()
        WebDriverWait(driver,20).until(
            EC.element_to_be_clickable((By.XPATH,"//div/div/div/discover-no-results/div/div/h1[contains(text(),'No results found ')]"))
        )
        kdm_file_path = f"{Path}{screenshot}_kdm.png"
        screen_capture = ImageGrab.grab()
        screen_capture.save(kdm_file_path)
        print(f"Screenshot saved to {kdm_file_path}")
    time.sleep(2)
    try:
        kdm_results = driver.find_element(By.XPATH, "//div/doc-table/div[@class='doc-table-container']")
        kdm_results_text = kdm_results.text
        if version_value in kdm_results_text:
            print(f"{operation_value_vlog} kdm metric is been emitted. Hence passing the case.")
        else:
            print(f"{operation_value_vlog} kdm metric is not been emitted. Hence failing the case.")
            print("Note:")
            print("Recheck once again by triggering metric from DUT and leaving the device idle for 4 hours with stable internet")
            print("If still metric is not seen raise a jira")
    except NoSuchElementException:
        print(f"{operation_value_vlog} kdm metric is not been emitted. Hence failing the case.")
        print("Note:")
        print("Recheck once again by triggering metric from DUT and leaving the device idle for 4 hours with stable internet")
        print("If still metric is not seen raise a jira")
    search = WebDriverWait(driver,20).until(
        EC.element_to_be_clickable((By.XPATH,"//div/div/form/div/div/input[@placeholder='Search...']"))
    )
    search.clear()
    time.sleep(2)
    search.send_keys(Filter_minerva)
    time.sleep(2)
    driver.find_element(By.XPATH,"//form/div/div/button/span[@class='fa fa-search']").click()
    time.sleep(2)
    pyautogui.hotkey("Ctrl", "R")
    time.sleep(2)
    try:
        minerva_results = WebDriverWait(driver,20).until(
              EC.element_to_be_clickable((By.XPATH, "//div/doc-table/div[@class='doc-table-container']"))
        )
        time.sleep(3)
        minerva_results_text = minerva_results.text
        if version_value in minerva_results_text:
            WebDriverWait(driver,20).until(
              EC.element_to_be_clickable((By.XPATH,"//div/table/tbody/tr/td[@ng-click='toggleRow()']"))
            ).click()
            full_capture = driver.find_element(By.XPATH, "//div/table/tbody/tr/td/doc-viewer/div[@class='doc-viewer']")
            minerva_file_path = f"{Path}{screenshot}_minerva.png"
            full_capture.screenshot(minerva_file_path)
            print(f"Screenshot saved to {minerva_file_path}")
        else:
            print()
            minerva_file_path = f"{Path}{screenshot}_minerva.png"
            screen_capture = ImageGrab.grab()
            screen_capture.save(minerva_file_path)
            print(f"Screenshot saved to {minerva_file_path}")
    except NoSuchElementException and TimeoutException:
        print()
        WebDriverWait(driver,20).until(
            EC.element_to_be_clickable((By.XPATH,"//div/div/div/discover-no-results/div/div/h1[contains(text(),'No results found ')]"))
        )
        minerva_file_path = f"{Path}{screenshot}_minerva.png"
        screen_capture = ImageGrab.grab()
        screen_capture.save(minerva_file_path)
        print(f"Screenshot saved to {minerva_file_path}")
    time.sleep(2)
    try:
        minerva_results = driver.find_element(By.XPATH, "//div/doc-table/div[@class='doc-table-container']")
        minerva_results_text = minerva_results.text
        if version_value in minerva_results_text:
            print(f"{operation_value_vital} minerva metric is been emitted. Hence passing the case.")
        else:
            print(f"{operation_value_vital} minerva metric is not been emitted. Hence failing the case.")
            print("Note:")
            print("Recheck once again by triggering metric from DUT and leaving the device idle for 4 hours with stable internet")
            print("If still metric is not seen raise a jira")
    except NoSuchElementException:
        print(f"{operation_value_vital} minerva metric is not been emitted. Hence failing the case.")
        print("Note:")
        print("Recheck once again by triggering metric from DUT and leaving the device idle for 4 hours with stable internet")
        print("If still metric is not seen raise a jira")
    pyautogui.hotkey("alt", "tab")

def agg():
    print("Prerequisites: Metric should be emitted from device side and kept connected to stable internet for more then 8 hours")
    print()
    time.sleep(3)
    driver = webdriver.Firefox()
    driver.maximize_window()
    driver.get("https://kdm-agg-es.labcollab.net/app/kibana#/discover?_g=h@44136fa&_a=h@b49d08f")
    userid = WebDriverWait(driver,100).until(
        EC.element_to_be_clickable((By.XPATH,"//div/div/form/input[@id='user_name_field']"))
    )
    userid.send_keys(user_name)
    driver.find_element(By.XPATH,"//div/div/form/input[@id='user_name_btn']").click()
    WebDriverWait(driver,100).until(
        EC.element_to_be_clickable((By.XPATH,"//div/div/form/input[@id='password_field']"))
    ).send_keys(password)
    driver.find_element(By.XPATH,"//div/div/form/input[@id='password_btn']").click()
    search = WebDriverWait(driver,100).until(
        EC.element_to_be_clickable((By.XPATH,"//div/div/query-bar/form/div/div/div/input[@data-test-subj='queryInput']"))
    )
    time.sleep(3)
    pyautogui.hotkey("backspace")
    search.send_keys(Filter_kdm)
    time.sleep(3)
    WebDriverWait(driver,20).until(
        EC.element_to_be_clickable((By.XPATH,"//div/discover-app/kbn-top-nav/div/div/div/div/div[@class='kuiLocalMenu']"))
    ).click()
    WebDriverWait(driver,20).until(
        EC.element_to_be_clickable((By.XPATH,"//div/div/div/div/div/ul/li/a[contains(text(), 'Last 7 days')]"))
    ).click()
    time.sleep(2)
    driver.find_element(By.XPATH, "//button/span[@class='fa fa-search']").click()
    time.sleep(2)
    pyautogui.hotkey("Ctrl", "R")
    time.sleep(2)
    try:
        kdm_results = WebDriverWait(driver,30).until(
                EC.element_to_be_clickable((By.XPATH, "//main/div/div/div[@class = 'discover-content']"))
        )
        time.sleep(3)
        kdm_results_text = kdm_results.text
        if version_value in kdm_results_text:
            WebDriverWait(driver,20).until(
                EC.element_to_be_clickable((By.XPATH,"//div/table/tbody/tr/td[@ng-click='toggleRow()']"))
            ).click()
            full_capture = driver.find_element(By.XPATH,"//div/table/tbody/tr/td/doc-viewer[@hit='row']")
            kdm_file_path = f"{Path}{screenshot}_kdm.png"
            full_capture.screenshot(kdm_file_path)
            print(f"Screenshot saved to {kdm_file_path}")
        else:
            print()
            kdm_file_path = f"{Path}{screenshot}_kdm.png"
            screen_capture = ImageGrab.grab()
            screen_capture.save(kdm_file_path)
            print(f"Screenshot saved to {kdm_file_path}")
    except NoSuchElementException and TimeoutException:
        print()
        WebDriverWait(driver,20).until(
            EC.element_to_be_clickable((By.XPATH,"//main/div/div/div/discover-no-results/div/div/h1[contains(text(),'No results found ')]"))
        )
        kdm_file_path = f"{Path}{screenshot}_kdm.png"
        screen_capture = ImageGrab.grab()
        screen_capture.save(kdm_file_path)
        print(f"Screenshot saved to {kdm_file_path}")
    time.sleep(2)
    try:
        kdm_results = driver.find_element(By.XPATH, "//main/div/div/div[@class = 'discover-content']")
        kdm_results_text = kdm_results.text
        if version_value in kdm_results_text:
            print(f"{operation_value_vlog} kdm metric is been emitted. Hence passing the case.")
        else:
            print(f"{operation_value_vlog} kdm metric is not been emitted. Hence failing the case.")
            print("Note:")
            print("Recheck once again by triggering metric from DUT and leaving the device idle for 8 hours with stable internet")
            print("If still metric is not seen raise a jira")
    except NoSuchElementException:
        print(f"{operation_value_vlog} kdm metric is not been emitted. Hence failing the case.")
        print("Note:")
        print("Recheck once again by triggering metric from DUT and leaving the device idle for 8 hours with stable internet")
        print("If still metric is not seen raise a jira")
    search = WebDriverWait(driver,20).until(
        EC.element_to_be_clickable((By.XPATH,"//div/div/query-bar/form/div/div/div/input[@data-test-subj='queryInput']"))
    )
    search.clear()
    time.sleep(2)
    search.send_keys(Filter_minerva)
    time.sleep(2)
    driver.find_element(By.XPATH,"//form/div/div/button/span[@class='fa fa-search']").click()
    time.sleep(2)
    pyautogui.hotkey("Ctrl", "R")
    time.sleep(2)
    try:
        minerva_results = WebDriverWait(driver,30).until(
                EC.element_to_be_clickable((By.XPATH, "//button/span[@class='fa fa-search']"))
        )
        time.sleep(3)
        minerva_results_text = minerva_results.text
        if version_value in minerva_results_text:
            WebDriverWait(driver,20).until(
                EC.element_to_be_clickable((By.XPATH,"//div/table/tbody/tr/td[@ng-click='toggleRow()']"))
            ).click()
            full_capture = driver.find_element(By.XPATH,"//div/table/tbody/tr/td/doc-viewer[@hit='row']")
            minerva_file_path = f"{Path}{screenshot}_minerva.png"
            full_capture.screenshot(minerva_file_path)
            print(f"Screenshot saved to {minerva_file_path}")
        else:
            print()
            minerva_file_path = f"{Path}{screenshot}_minerva.png"
            screen_capture = ImageGrab.grab()
            screen_capture.save(minerva_file_path)
            print(f"Screenshot saved to {minerva_file_path}")
    except NoSuchElementException and TimeoutException:
        print()
        WebDriverWait(driver,20).until(
            EC.element_to_be_clickable((By.XPATH,"//main/div/div/div/discover-no-results/div/div/h1[contains(text(),'No results found ')]"))
        )
        minerva_file_path = f"{Path}{screenshot}_minerva.png"
        screen_capture = ImageGrab.grab()
        screen_capture.save(minerva_file_path)
        print(f"Screenshot saved to {minerva_file_path}")
    time.sleep(2)
    try:
        minerva_results = driver.find_element(By.XPATH, "//button/span[@class='fa fa-search']")
        minerva_results_text = minerva_results.text
        if version_value in minerva_results_text:
            print(f"{operation_value_vital} minerva metric is been emitted. Hence passing the case.")
        else:
            print(f"{operation_value_vital} minerva metric is not been emitted. Hence failing the case.")
            print("Note:")
            print("Recheck once again by triggering metric from DUT and leaving the device idle for 8 hours with stable internet")
            print("If still metric is not seen raise a jira")
    except NoSuchElementException:
        print(f"{operation_value_vital} minerva metric is not been emitted. Hence failing the case.")
        print("Note:")
        print("Recheck once again by triggering metric from DUT and leaving the device idle for 8 hours with stable internet")
        print("If still metric is not seen raise a jira")
    pyautogui.hotkey("alt", "tab")

def raw_agg_select():
    user_detail()
    metric_input()
    if raw_agg == "1":
        metric_time_raw()
        filter_values_vlog()
        filter_values_vital()
        search_filter()
        raw()
    else:
        metric_time_agg()
        filter_values_vlog()
        filter_values_vital()
        search_filter()
        agg()
raw_agg_select()
